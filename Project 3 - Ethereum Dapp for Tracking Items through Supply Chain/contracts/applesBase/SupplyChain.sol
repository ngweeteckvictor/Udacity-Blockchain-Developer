// SPDX-License-Identifier: MIT
pragma solidity >=0.4.24;

import "../applesCore/Ownable.sol";
import "../applesAccessControl/FarmerRole.sol";
import "../applesAccessControl/DistributorRole.sol";
import "../applesAccessControl/RetailerRole.sol";
import "../applesAccessControl/ConsumerRole.sol";

// Define a contract 'Supplychain'
contract SupplyChain is Ownable, FarmerRole, DistributorRole, RetailerRole, ConsumerRole {

  // Define a public mapping 'apples' that maps the UPC to an apple.
  mapping (uint => Apple) apples;

  // Define enum 'State' with the following values:
  enum State 
  { 
    Harvested,            // 0
    Packed,               // 1
    ShippedToDistributor, // 2
    ReceivedByDistributor,// 3
    ShippedToRetailer,    // 4
    ReceivedByRetailer,   // 5
    OnSale,               // 6
    Purchased             // 7
  }

  // Define a struct 'Apple' with the following fields:
  struct Apple {
    uint    upc;      // Universal Product Code (UPC), generated by the Farmer, goes on the package, can be verified by the Consumer
    uint    batch;    // Batch number of the apples
    address ownerID;  // Metamask-Ethereum address of the current owner as the product moves through the 8 stages
    address originFarmerID; // Metamask-Ethereum address of the Farmer
    string  originFarmName; // Farmer Name
    string  originFarmInformation;  // Farmer Information
    string  originFarmLatitude; // Farm Latitude
    string  originFarmLongitude;  // Farm Longitude
    address distributorID;  // Metamask-Ethereum address of the Distributor
    address retailerID; // Metamask-Ethereum address of the Retailer
    address consumerID; // Metamask-Ethereum address of the Consumer
    State   state;  // State of the apple as represented in the enum above
    uint[] dates; // Date of the state change
  }

  // Define 8 events with the same 8 state values and accept 'upc' as input argument
  event Harvested(uint upc);
  event Packed(uint upc);
  event ShippedToDistributor(uint upc);
  event ReceivedByDistributor(uint upc);
  event ShippedToRetailer(uint upc);
  event ReceivedByRetailer(uint upc);
  event OnSale(uint upc);
  event Purchased(uint upc);

  // Define a modifer that verifies the Caller
  modifier verifyCaller (address _address) {
    require(msg.sender == _address); 
    _;
  }

  // Define a modifier that checks if an apple.state of a upc is Harvested
  modifier isHarvested(uint _upc) {
    require(apples[_upc].state == State.Harvested);
    _;
  }

  // Define a modifier that checks if an apple.state of a upc is Packed
  modifier isPacked(uint _upc) {
    require(apples[_upc].state == State.Packed);
    _;
  }

  // Define a modifier that checks if an apple.state of a upc is ShippedToDistributor
  modifier isShippedToDistributor(uint _upc) {
    require(apples[_upc].state == State.ShippedToDistributor);
    _;
  }
  
  // Define a modifier that checks if an apple.state of a upc is ReceivedByDistributor
  modifier isReceivedByDistributor(uint _upc) {
    require(apples[_upc].state == State.ReceivedByDistributor);
    _;
  }

  // Define a modifier that checks if an apple.state of a upc is ShippedToRetailer
  modifier isShippedToRetailer(uint _upc) {
    require(apples[_upc].state == State.ShippedToRetailer);
    _;
  }

  // Define a modifier that checks if an apple.state of a upc is ReceivedByRetailer
  modifier isReceivedByRetailer(uint _upc) {
    require(apples[_upc].state == State.ReceivedByRetailer);
    _;
  }

  // Define a modifier that checks if an apple.state of a upc is OnSale
  modifier isOnSale(uint _upc) {
    require(apples[_upc].state == State.OnSale);
    _;
  }
  
  // Define a modifier that checks if an apple.state of a upc is Purchased
  modifier isPurchased(uint _upc) {
    require(apples[_upc].state == State.Purchased);
    _;
  }

  // Define a function 'kill' if required
  function kill() public onlyOwner {
      selfdestruct(payable(owner()));
  }

  // Define a function 'harvestApples' that allows a farmer to mark the apples as 'Harvested'
  function harvestApples(
    uint _upc, 
    address _originFarmerID,
    string calldata _originFarmName, 
    string calldata _originFarmInformation, 
    string calldata _originFarmLatitude, 
    string calldata _originFarmLongitude) public onlyFarmer
  {
    uint timeStamp = block.timestamp;

    // Add the new apples as part of Harvest
    apples[_upc].upc = _upc;
    apples[_upc].batch = timeStamp;
    apples[_upc].ownerID = msg.sender;
    apples[_upc].originFarmerID = _originFarmerID;
    apples[_upc].originFarmName = _originFarmName;
    apples[_upc].originFarmInformation = _originFarmInformation;
    apples[_upc].originFarmLatitude = _originFarmLatitude;
    apples[_upc].originFarmLongitude = _originFarmLongitude;

    // Update the apples state
    apples[_upc].state = State.Harvested;

    // Update the date of the state changes
    apples[_upc].dates.push(timeStamp);

    // Emit the Harvested event
    emit Harvested(_upc);
  }

  // Define a function 'packApples' that allows a farmer to mark an item 'Packed'
  function packApples(uint _upc) public 
  // Call modifier to check if upc has passed previous supply chain stage
  isHarvested(_upc) 
  // Call modifier to verify caller of this function
  verifyCaller(apples[_upc].originFarmerID)
  {
    // Update the apples state
    apples[_upc].state = State.Packed;

    // Update the date of the state changes
    apples[_upc].dates.push(block.timestamp);

    // Emit the appropriate event
    emit Packed(_upc);
  }

  // Define a function 'shipApplesToDistributor' that allows the farmer to mark apples 'ShippedToDistributor'
  // Use the above modifers to check if the item is Packed
  function shipApplesToDistributor(uint _upc) public 
    // Call modifier to check if upc has passed previous supply chain stage
    isPacked(_upc)
    // Call modifier to verify caller of this function
    verifyCaller(apples[_upc].originFarmerID)
  {
    // Update the apples state
    apples[_upc].state = State.ShippedToDistributor;

    // Update the date of the state changes
    apples[_upc].dates.push(block.timestamp);
    
    // Emit the appropriate event
    emit ShippedToDistributor(_upc);
  }

  // Define a function 'receivedApplesByDistributor' that allows the Distributor to mark an item 'ReceivedByDistributor'
  // Use the above modifiers to check if the item is shippedToDistributor
  function receiveApplesByDistributor(uint _upc) public 
    // Call modifier to check if upc has passed previous supply chain stage
    isShippedToDistributor(_upc)
    // Access Control List enforced by calling Smart Contract / DApp
    onlyDistributor()
  {
    // Update the appropriate fields - ownerID, distributorID, apple state
    apples[_upc].ownerID = msg.sender;
    apples[_upc].distributorID = msg.sender;
    apples[_upc].state = State.ReceivedByDistributor;

    // Update the date of the state changes
    apples[_upc].dates.push(block.timestamp);

    // Emit the appropriate event
    emit ReceivedByDistributor(_upc);
  }

  // Define a function 'shipApplesToRetailer' that allows the distributor to mark an item 'ShippedToRetailer'
  // Use the above modifers to check if the item is sold
  function shipApplesToRetailer(uint _upc) public 
    // Call modifier to check if upc has passed previous supply chain stage
    isReceivedByDistributor(_upc)
    // Call modifier to verify caller of this function
    verifyCaller(apples[_upc].distributorID)
  {
    // Update the apples state
    apples[_upc].state = State.ShippedToRetailer;

    // Update the date of the state changes
    apples[_upc].dates.push(block.timestamp);
    
    // Emit the appropriate event
    emit ShippedToRetailer(_upc);
  }

  // Define a function 'receiveApplesByRetailer' that allows the retailer to mark an item 'ReceivedByRetailer'
  // Use the above modifiers to check if the item is shipped
  function receiveApplesByRetailer(uint _upc) public 
    // Call modifier to check if upc has passed previous supply chain stage
    isShippedToRetailer(_upc)
    // Access Control List enforced by calling Smart Contract / DApp
    onlyRetailer()
  {
    // Update the appropriate fields - ownerID, retailerID, apple state
    apples[_upc].ownerID = msg.sender;
    apples[_upc].retailerID = msg.sender;
    apples[_upc].state = State.ReceivedByRetailer;

    // Update the date of the state changes
    apples[_upc].dates.push(block.timestamp);

    // Emit the appropriate event
    emit ReceivedByRetailer(_upc);
  }

  // Define a function 'onSaleApples' that allows a Retailer to mark an item 'OnSale'
  function onSaleApples(uint _upc) public 
  // Call modifier to check if upc has passed previous supply chain stage
  isReceivedByRetailer(_upc)
  // Call modifier to verify caller of this function
  verifyCaller(apples[_upc].retailerID)
  {
    // Update the apples state
    apples[_upc].state = State.OnSale;

    // Update the date of the state changes
    apples[_upc].dates.push(block.timestamp);

    // Emit the appropriate event
    emit OnSale(_upc);
  }

  // Define a function 'purchaseApples' that allows the consumer to mark an item 'Purchased'
  // Use the above modifiers to check if the item is received
  function purchaseApples(uint _upc) public 
    // Call modifier to check if upc has passed previous supply chain stage
    isOnSale(_upc)
    // Access Control List enforced by calling Smart Contract / DApp
    onlyConsumer()
  {
    // Update the appropriate fields - ownerID, consumerID, apple state
    apples[_upc].ownerID = msg.sender;
    apples[_upc].consumerID = msg.sender;
    apples[_upc].state = State.Purchased;

    // Update the date of the state changes
    apples[_upc].dates.push(block.timestamp);

    // Emit the appropriate event
    emit Purchased(_upc);
  }

  // Define a function 'fetchAppleFarmerHistory' that fetches the farmer's data of the apple
  function fetchAppleFarmerHistory(uint _upc) public view returns 
  (
    uint    upc,
    uint    batch,
    address ownerID,
    address originFarmerID,
    string  memory originFarmName,
    string  memory originFarmInformation,
    string  memory originFarmLatitude,
    string  memory originFarmLongitude
  ) 
  {
    // Assign values to the parameters
    upc = apples[_upc].upc;
    batch = apples[_upc].batch;
    ownerID = apples[_upc].ownerID;
    originFarmerID = apples[_upc].originFarmerID;
    originFarmName = apples[_upc].originFarmName;
    originFarmInformation = apples[_upc].originFarmInformation;
    originFarmLatitude = apples[_upc].originFarmLatitude;
    originFarmLongitude = apples[_upc].originFarmLongitude;
    
    return 
    (
      upc,
      batch,
      ownerID,
      originFarmerID,
      originFarmName,
      originFarmInformation,
      originFarmLatitude,
      originFarmLongitude
    );
  }

  // Define a function 'fetchAppleHistory' that fetches the data of the apple
  function fetchAppleHistory(uint _upc) public view returns 
  (
    uint    upc,
    uint    batch,
    address ownerID,
    address originFarmerID,
    address distributorID,
    address retailerID,
    address consumerID,
    string memory state,
    uint[] memory dates
  ) 
  {
    // Assign values to the parameters
    upc = apples[_upc].upc;
    batch = apples[_upc].batch;
    ownerID = apples[_upc].ownerID;
    originFarmerID = apples[_upc].originFarmerID;
    distributorID = apples[_upc].distributorID;
    retailerID = apples[_upc].retailerID;
    consumerID = apples[_upc].consumerID;

    // Assign the state to the parameter
    if(apples[_upc].state == State.Harvested)
      state = "Harvested";
    else if(apples[_upc].state == State.Packed)
      state = "Packed";
    else if(apples[_upc].state == State.ShippedToDistributor)
      state = "Shipped To Distributor";
    else if(apples[_upc].state == State.ReceivedByDistributor)
      state = "Received By Distributor";
    else if(apples[_upc].state == State.ShippedToRetailer)
      state = "Shipped To Retailer";      
    else if(apples[_upc].state == State.ReceivedByRetailer)
      state = "Received By Retailer";      
    else if(apples[_upc].state == State.OnSale)
      state = "On Sale";
    else if(apples[_upc].state == State.Purchased)
      state = "Purchased";
    else
      state = "Unknown";

    dates = apples[_upc].dates;

    return 
    (
      upc,
      batch,
      ownerID,
      originFarmerID,
      distributorID,
      retailerID,
      consumerID,
      state,
      dates
    );
  }
}
